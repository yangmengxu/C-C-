1.为何要使用虚析构函数

答：如果用基类指针或者引用来指向派生类对象时，如果不将基类析构函数声明为虚析构函数，那么当调用结束后，
系统将会调用对应指针或者引用类型的析构函数，而不调用相应对象类型的析构函数。因此使用虚析构函数可以保证
正确的析构函数序列被调用。

2.动态联编和静态联编

答；自从C++引入了函数重载这个特性，使得编译器在调用某个函数时候需要函数参数及名称（c中只需要查看函数名）
才能确定使用的函数，C++编译器可以在编译过程完成这种联编，称为静态联编。对于动态联编，由于虚函数的引入，
使得编译器在编译时不知道用户将选择哪一个类型的函数，所以编译器必须能够生成在 程序运行 时选择正确的虚方法的
代码，这被称为动态联编。

3.虚函数的机制

编译器处理虚函数的方法是：给每个对象添加一个 隐藏成员，该成员中保存了一个指向虚函数表的指针，虚函数表中存储了
为类对象进行声明的虚函数的地址。
一、每个对象都将增大，增大量为存储的地址空间
二、对于每个类都将创建一个虚函数地址表
三、对于每个虚函数调用，都需要到虚函数表中查找地址
